
char *reset_ptr(char *current_ptr)
{
	char *new_ptr;
	new_ptr = current_ptr;
	
	while(*new_ptr && ft_isalpha(*new_ptr) == 1)
		new_ptr++;
	return (new_ptr);
}

// this function gives env_value and also change the ptr of the arr
char *get_env_value(char *current_ptr)
{
	char *save_ptr;
	char *env_value;
	int len;

	len = 0;
	save_ptr = current_ptr;
	while(*current_ptr && ft_isalpha(*current_ptr) == 1)
	{
		len++;
		current_ptr++;
	}
	env_value = (char *)malloc(sizeof(char) * len);
	ft_strlcpy(env_value,save_ptr,len+1);
	return (env_value);
}

char *expand_env_for_heredoc(char *arr)
{
	int len;
	char *tmp;// tmp arr to strlcpy
	char *save_ptr;//to memorise the ptr of arr to strlcpy
	char *rtn;//return arr
	char *env_value;

	rtn = (char *)malloc(sizeof(char) * 1024);
	while (*arr)
	{
		if (*arr == '$')
		{
			arr++;
			rtn = ft_strjoin(rtn,getenv(get_env_value(arr)));
			arr = reset_ptr(arr);
		}
		else
		{
			len  = 0;
			save_ptr = arr;//save the current ptr
			while(*arr != '$')
			{
				len++;
				arr++;
			}
			tmp = (char *)malloc(sizeof(char) * len);
			ft_strlcpy(tmp,save_ptr,len + 1);
			rtn = ft_strjoin(rtn,tmp);
			free(tmp);//prepare for upcoming arr;
		}
	}
	return (rtn);
}
